{"version":3,"sources":["App.js","components/Button.js","serviceWorker.js","index.js"],"names":["App","props","reset","setState","current","previous","nextIsReset","addToCurrent","symbol","console","log","indexOf","state","push","calculate","length","eval","String","backSpace","slice","buttons","cols","action","this","className","map","btn","i","key","Component","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b25c606.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"./components/Button\";\nimport \"./css/style.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current: \"0\",\n      previous: [],\n      nextIsReset: false,\n    };\n  }\n\n  reset = () => {\n    this.setState({ current: \"0\", previous: [], nextIsReset: false });\n  };\n\n  addToCurrent = (symbol) => {\n    console.log(symbol);\n    if ([\"/\", \"*\", \"-\", \"+\"].indexOf(symbol) > -1) {\n      let { previous } = this.state;\n      previous.push(this.state.current + \" \" + symbol);\n      this.setState({ previous, nextIsReset: true });\n    } else {\n      if (\n        (this.state.current === \"0\" && symbol !== \".\") ||\n        this.state.nextIsReset\n      ) {\n        this.setState({ current: symbol, nextIsReset: false });\n      } else {\n        this.setState({ current: this.state.current + symbol });\n      }\n    }\n  };\n\n  calculate = (symbol) => {\n    let { current, previous } = this.state;\n    if (previous.length > 0) {\n      current = eval(String(previous[previous.length - 1] + current));\n\n      this.setState({ current, previous: [], nextIsReset: true });\n    }\n  };\n\n  backSpace = () => {\n    let { current } = this.state;\n    if (current.length >= 2) {\n      this.setState({ current: current.slice(0, -1) });\n    } else {\n      this.setState({ current: \"0\" });\n    }\n  };\n\n  render() {\n    const buttons = [\n      { symbol: \"C\", cols: 2, action: this.reset },\n      { symbol: \"DEL\", cols: 1, action: this.backSpace },\n      { symbol: \"/\", cols: 1, action: this.addToCurrent },\n      { symbol: \"7\", cols: 1, action: this.addToCurrent },\n      { symbol: \"8\", cols: 1, action: this.addToCurrent },\n      { symbol: \"9\", cols: 1, action: this.addToCurrent },\n      { symbol: \"*\", cols: 1, action: this.addToCurrent },\n      { symbol: \"4\", cols: 1, action: this.addToCurrent },\n      { symbol: \"5\", cols: 1, action: this.addToCurrent },\n      { symbol: \"6\", cols: 1, action: this.addToCurrent },\n      { symbol: \"-\", cols: 1, action: this.addToCurrent },\n      { symbol: \"1\", cols: 1, action: this.addToCurrent },\n      { symbol: \"2\", cols: 1, action: this.addToCurrent },\n      { symbol: \"3\", cols: 1, action: this.addToCurrent },\n      { symbol: \"+\", cols: 1, action: this.addToCurrent },\n      { symbol: \"0\", cols: 2, action: this.addToCurrent },\n      { symbol: \".\", cols: 1, action: this.addToCurrent },\n      { symbol: \"=\", cols: 1, action: this.calculate },\n    ];\n\n    return (\n      <div className=\"App\">\n        <div>\n          {this.state.previous.length > 0 ? (\n            <div className=\"prev-display\">\n              {this.state.previous[this.state.previous.length - 1]}\n            </div>\n          ) : null}\n          <div className=\"result\"> {this.state.current}</div>\n        </div>\n\n        <br />\n        {buttons.map((btn, i) => {\n          return (\n            <Button\n              key={i}\n              symbol={btn.symbol}\n              cols={btn.cols}\n              action={(symbol) => btn.action(symbol)}\n            ></Button>\n          );\n        })}\n      </div>\n    );\n  } w\n}\n\nexport default App;","import React, { Component } from 'react'\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    return (\r\n      <div className={`column-${this.props.cols}`}>\r\n        <button\r\n          className=\"calc-button\"\r\n          onClick={() => this.props.action(this.props.symbol)}\r\n        >\r\n          {this.props.symbol}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Button","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}